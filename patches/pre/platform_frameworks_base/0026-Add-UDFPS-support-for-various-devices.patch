From 512e36bb51ad2be4f153d330fd436afb6a99e935 Mon Sep 17 00:00:00 2001
From: ChonDoit <thphantomblog@gmail.com>
Date: Wed, 5 Apr 2023 12:55:36 -0300
Subject: [PATCH] Add UDFPS support for various devices

sarasa
---
 packages/SystemUI/res/values/cr_config.xml    |   2 +-
 .../SystemUI/res/values/lineage_config.xml    |   2 +-
 .../systemui/biometrics/UdfpsSurfaceView.java |  12 +
 .../systemui/biometrics/UdfpsView.java        |  56 +++-
 services/core/Android.bp                      |   4 +
 .../server/biometrics/AuthService.java        | 273 +++++++++++++++++-
 .../sensors/fingerprint/UdfpsHelper.java      | 141 ++++++++-
 .../fingerprint/hidl/Fingerprint21.java       |   3 +-
 8 files changed, 469 insertions(+), 24 deletions(-)

diff --git a/packages/SystemUI/res/values/cr_config.xml b/packages/SystemUI/res/values/cr_config.xml
index eac0e15ed7be..d791411ac14d 100644
--- a/packages/SystemUI/res/values/cr_config.xml
+++ b/packages/SystemUI/res/values/cr_config.xml
@@ -39,7 +39,7 @@
     <integer name="config_screenRecorderMaxFramerate">0</integer>
 
     <!-- Udfps vendor code -->
-    <integer name="config_udfps_vendor_code">22</integer>
+    <integer name="config_udfps_vendor_code">-1</integer>
 
     <!-- Flag to enable framework dimming for udfps -->
     <bool name="config_udfpsFrameworkDimming">false</bool>
diff --git a/packages/SystemUI/res/values/lineage_config.xml b/packages/SystemUI/res/values/lineage_config.xml
index 5832a7a7c76c..342050ef014f 100644
--- a/packages/SystemUI/res/values/lineage_config.xml
+++ b/packages/SystemUI/res/values/lineage_config.xml
@@ -32,7 +32,7 @@
             0 - GLOBAL HBM
             1 - LOCAL HBM
     -->
-    <integer name="config_udfpsHbmType">1</integer>
+    <integer name="config_udfpsHbmType">0</integer>
 
     <!-- Udfps HBM provider class name -->
     <string name="config_udfpsHbmProviderComponent">com.android.systemui.biometrics.DummyUdfpsHbmProvider</string>
diff --git a/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsSurfaceView.java b/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsSurfaceView.java
index 71e33a699934..7be09fdabb36 100644
--- a/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsSurfaceView.java
+++ b/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsSurfaceView.java
@@ -21,9 +21,11 @@ import android.annotation.Nullable;
 import android.content.Context;
 import android.graphics.drawable.Drawable;
 import android.graphics.Canvas;
+import android.graphics.Color;
 import android.graphics.Paint;
 import android.graphics.PixelFormat;
 import android.graphics.RectF;
+import android.os.SystemProperties;
 import android.util.AttributeSet;
 import android.util.Log;
 import android.view.Surface;
@@ -74,7 +76,17 @@ public class UdfpsSurfaceView extends SurfaceView implements SurfaceHolder.Callb
 
         mSensorPaint = new Paint(0 /* flags */);
         mSensorPaint.setAntiAlias(true);
+        String colorStr = SystemProperties.get("persist.sys.phh.fod_color", "00ff00");
         mSensorPaint.setColor(context.getColor(R.color.config_udfpsColor));
+        try {
+           int parsedColor = Color.parseColor("#" + colorStr);
+           int r = (parsedColor >> 16) & 0xff;
+           int g = (parsedColor >> 8) & 0xff;
+           int b = (parsedColor >> 0) & 0xff;
+           mSensorPaint.setARGB(255, r, g, b);
+    	} catch(Throwable t) {
+    		Log.d("PHH", "Failed parsing color #" + colorStr, t);
+    	}
         mSensorPaint.setStyle(Paint.Style.FILL);
 
         mUdfpsIconPressed = context.getDrawable(R.drawable.udfps_icon_pressed);
diff --git a/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsView.java b/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsView.java
index e4cbb527d338..b9911cc83bdf 100644
--- a/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsView.java
+++ b/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsView.java
@@ -42,6 +42,11 @@ import com.android.systemui.R;
 import com.android.systemui.biometrics.UdfpsHbmTypes.HbmType;
 import com.android.systemui.doze.DozeReceiver;
 
+import java.io.BufferedReader;
+import java.io.File;
+import java.io.FileReader;
+import java.io.PrintWriter;
+
 /**
  * A view containing 1) A SurfaceView for HBM, and 2) A normal drawable view for all other
  * animations.
@@ -69,6 +74,48 @@ public class UdfpsView extends FrameLayout implements DozeReceiver, UdfpsIllumin
     @Nullable private UdfpsHbmProvider mHbmProvider;
     @Nullable private String mDebugMessage;
     private boolean mIlluminationRequested;
+
+    public static void samsungCmd(String cmd) {
+	    try {
+		    writeFile("/sys/devices/virtual/sec/tsp/cmd", cmd);
+
+		    String status = readFile("/sys/devices/virtual/sec/tsp/cmd_status");
+		    String ret = readFile("/sys/devices/virtual/sec/tsp/cmd_result");
+
+		    android.util.Log.d("PHH", "Sending command " + cmd + " returned " + ret + ":" + status);
+	    } catch(Exception e) {
+		    android.util.Log.d("PHH", "Failed sending command " + cmd, e);
+	    }
+    }
+    private static void writeFile(String path, String value) {
+	    try {
+		    PrintWriter writer = new PrintWriter(path, "UTF-8");
+		    writer.println(value);
+		    writer.close();
+	    } catch(Exception e) {
+		    android.util.Log.d("PHH", "Failed writing to " + path + ": " + value);
+	    }
+    }
+
+    private static void writeFile(File file, String value) {
+	    try {
+		    PrintWriter writer = new PrintWriter(file, "UTF-8");
+		    writer.println(value);
+		    writer.close();
+	    } catch(Exception e) {
+		    android.util.Log.d("PHH", "Failed writing to " + file + ": " + value);
+	    }
+    }
+    private static String readFile(String path) {
+	    try {
+		    File f = new File(path);
+
+		    BufferedReader b = new BufferedReader(new FileReader(f));
+		    return b.readLine();
+	    } catch(Exception e) {
+		    return null;
+	    }
+    }
 
     public UdfpsView(Context context, AttributeSet attrs) {
         super(context, attrs);
@@ -243,7 +290,7 @@ public class UdfpsView extends FrameLayout implements DozeReceiver, UdfpsIllumin
             Log.e(TAG, "doIlluminate | surface must be non-null for GHBM");
         }
         if (mHbmProvider != null) {
-            mHbmProvider.enableHbm(mHbmType, surface, () -> {
+            if (mHbmProvider != null) mHbmProvider.enableHbm(mHbmType, surface, () -> {
                 if (mGhbmView != null) {
                     mGhbmView.drawIlluminationDot(mSensorRect);
                 }
@@ -255,6 +302,11 @@ public class UdfpsView extends FrameLayout implements DozeReceiver, UdfpsIllumin
                     Log.w(TAG, "doIlluminate | onIlluminatedRunnable is null");
                 }
             });
+            else {
+        		if (mGhbmView != null) {
+        			mGhbmView.drawIlluminationDot(mSensorRect);
+        		}
+        	}
         }
     }
 
@@ -269,7 +321,7 @@ public class UdfpsView extends FrameLayout implements DozeReceiver, UdfpsIllumin
             mGhbmView.setVisibility(View.INVISIBLE);
         }
         if (mHbmProvider != null) {
-            mHbmProvider.disableHbm(null /* onHbmDisabled */);
+            if (mHbmProvider != null) mHbmProvider.disableHbm(null /* onHbmDisabled */);
         }
     }
 }
diff --git a/services/core/Android.bp b/services/core/Android.bp
index 1b26d2f7ee43..6a307f084d08 100644
--- a/services/core/Android.bp
+++ b/services/core/Android.bp
@@ -156,6 +156,10 @@ java_library_static {
         "android.hardware.soundtrigger-V2.3-java",
         "android.hardware.power.stats-V1-java",
         "android.hidl.manager-V1.2-java",
+        "vendor.goodix.hardware.biometrics.fingerprint-V2.1-java",
+        "vendor.samsung.hardware.biometrics.fingerprint-V3.0-java",
+        "vendor.oplus.hardware.biometrics.fingerprint-V2.1-java",
+        "vendor.oppo.hardware.biometrics.fingerprint-V2.1-java",
         "capture_state_listener-aidl-java",
         "icu4j_calendar_astronomer",
         "netd-client",
diff --git a/services/core/java/com/android/server/biometrics/AuthService.java b/services/core/java/com/android/server/biometrics/AuthService.java
index 16a4e106a2e2..227dcdc4e950 100644
--- a/services/core/java/com/android/server/biometrics/AuthService.java
+++ b/services/core/java/com/android/server/biometrics/AuthService.java
@@ -75,6 +75,21 @@ import com.android.server.SystemService;
 import java.util.ArrayList;
 import java.util.List;
 
+import android.hardware.display.DisplayManager;
+
+import android.graphics.Point;
+import android.util.DisplayMetrics;
+import java.io.BufferedReader;
+import java.io.File;
+import java.io.FileReader;
+import java.io.PrintWriter;
+
+import android.os.FileObserver;
+import android.os.Build;
+
+import vendor.samsung.hardware.biometrics.fingerprint.V3_0.ISehBiometricsFingerprint;
+import vendor.goodix.hardware.biometrics.fingerprint.V2_1.IGoodixFingerprintDaemon;
+
 /**
  * System service that provides an interface for authenticating with biometrics and
  * PIN/pattern/password to BiometricPrompt and lock screen.
@@ -90,6 +105,10 @@ public class AuthService extends SystemService {
     private IBiometricService mBiometricService;
     @VisibleForTesting
     final IAuthService.Stub mImpl;
+
+    private FileObserver fodFileObserver = null;
+    private FileObserver fodFileObserver2 = null;
+    private ISehBiometricsFingerprint mSamsungFingerprint = null;
 
     /**
      * Class for injecting dependencies into AuthService.
@@ -639,6 +658,72 @@ public class AuthService extends SystemService {
         registerAuthenticators(hidlConfigs);
 
         mInjector.publishBinderService(this, mImpl);
+
+        try {
+            mSamsungFingerprint = ISehBiometricsFingerprint.getService();
+            android.util.Log.e("PHH", "Got samsung fingerprint HAL");
+        } catch(Exception e) {
+            android.util.Log.e("PHH", "Failed getting Samsung fingerprint HAL", e);
+        }
+        if (samsungHasCmd("fod_enable") && mSamsungFingerprint != null) {
+            samsungCmd("fod_enable,1,1,0");
+            String actualMaskBrightnessPath = "/sys/class/lcd/panel/actual_mask_brightness";
+            android.util.Log.e("PHH-Enroll", "Reading actual brightness file gives " + readFile(actualMaskBrightnessPath));
+            fodFileObserver = new FileObserver(actualMaskBrightnessPath, FileObserver.MODIFY) {
+                @Override
+                public void onEvent(int event, String path) {
+                    String actualMask = readFile(actualMaskBrightnessPath);
+                    try {
+                        mSamsungFingerprint = ISehBiometricsFingerprint.getService();
+                    } catch(Exception e) {}
+                    Slog.d("PHH-Enroll", "New actual mask brightness is " + actualMask);
+                    try {
+                        int eventReq = 0;
+                        if("0".equals(actualMask)) {
+                            eventReq = 1; //released
+                        } else {
+                            eventReq = 2; //pressed
+                        }
+                        if (mSamsungFingerprint != null) {
+                            mSamsungFingerprint.sehRequest(22 /* SEM_FINGER_STATE */, eventReq, new java.util.ArrayList<Byte>(),
+                                    (int retval, java.util.ArrayList<Byte> out) -> {} );
+                        }
+                    } catch(Exception e) {
+                        Slog.d("PHH-Enroll", "Failed setting samsung event for mask observer", e);
+                    }
+                }
+            };
+            fodFileObserver.startWatching();
+        }
+
+        String asusGhbmOnAchieved = "/sys/class/drm/ghbm_on_achieved";
+        if( (new File(asusGhbmOnAchieved)).exists()) {
+            fodFileObserver2 = new FileObserver(asusGhbmOnAchieved, FileObserver.MODIFY) {
+                boolean wasOn = false;
+                @Override
+                public void onEvent(int event, String path) {
+                    String spotOn = readFile(asusGhbmOnAchieved);
+                    if ("1".equals(spotOn)) {
+                        if(!wasOn) {
+                            try {
+                                IGoodixFingerprintDaemon goodixDaemon = IGoodixFingerprintDaemon.getService();
+
+                                // Send UI ready
+                                goodixDaemon.sendCommand(200002, new java.util.ArrayList<Byte>(), (returnCode, resultData) -> {
+                                    Slog.e(TAG, "Goodix send command touch pressed returned code "+ returnCode);
+                                });
+                            } catch(Throwable t) {
+                                Slog.d("PHH-Enroll", "Failed sending goodix command", t);
+                            }
+                        }
+                        wasOn = true;
+                    } else {
+                        wasOn = false;
+                    }
+                }
+            };
+            fodFileObserver2.startWatching();
+        }
     }
 
     /**
@@ -736,27 +821,209 @@ public class AuthService extends SystemService {
         return modality == BiometricAuthenticator.TYPE_CREDENTIAL
                 ? modality : (modality & ~BiometricAuthenticator.TYPE_CREDENTIAL);
     }
+    
+    private static String readFile(String path) {
+        try {
+            File f = new File(path);
+
+            BufferedReader b = new BufferedReader(new FileReader(f));
+            return b.readLine();
+        } catch(Exception e) {
+            return null;
+        }
+    }
+
+        private static boolean samsungHasCmd(String cmd) {
+        try {
+            File f = new File("/sys/devices/virtual/sec/tsp/cmd_list");
+            if (!f.exists()) return false;
+
+	    android.util.Log.d("PHH", "Managed to grab cmd list, checking...");
+            BufferedReader b = new BufferedReader(new FileReader(f));
+            String line = null;
+            while( (line = b.readLine()) != null) {
+                if (line.equals(cmd)) return true;
+            }
+	    android.util.Log.d("PHH", "... nope");
+            return false;
+        } catch(Exception e) {
+	    android.util.Log.d("PHH", "Failed reading cmd_list", e);
+            return false;
+        }
+    }
+
+        public static void samsungCmd(String cmd) {
+        try {
+	    writeFile("/sys/devices/virtual/sec/tsp/cmd", cmd);
+
+            String status = readFile("/sys/devices/virtual/sec/tsp/cmd_status");
+            String ret = readFile("/sys/devices/virtual/sec/tsp/cmd_result");
+
+            android.util.Log.d("PHH", "Sending command " + cmd + " returned " + ret + ":" + status);
+        } catch(Exception e) {
+            android.util.Log.d("PHH", "Failed sending command " + cmd, e);
+        }
+    }
 
+    private static void writeFile(String path, String value) {
+        try {
+            PrintWriter writer = new PrintWriter(path, "UTF-8");
+            writer.println(value);
+            writer.close();
+        } catch(Exception e) {
+            android.util.Log.d("PHH", "Failed writing to " + path + ": " + value);
+        }
+    }
+
+    private static void writeFile(File file, String value) {
+        try {
+            PrintWriter writer = new PrintWriter(file, "UTF-8");
+            writer.println(value);
+            writer.close();
+        } catch(Exception e) {
+            android.util.Log.d("PHH", "Failed writing to " + file + ": " + value);
+        }
+    }
 
     private FingerprintSensorPropertiesInternal getHidlFingerprintSensorProps(int sensorId,
             @BiometricManager.Authenticators.Types int strength) {
         // The existence of config_udfps_sensor_props indicates that the sensor is UDFPS.
-        final int[] udfpsProps = getContext().getResources().getIntArray(
+        int[] udfpsProps = getContext().getResources().getIntArray(
                 com.android.internal.R.array.config_udfps_sensor_props);
 
         // Non-empty workaroundLocations indicates that the sensor is SFPS.
         final List<SensorLocationInternal> workaroundLocations =
                 getWorkaroundSensorProps(getContext());
 
-        final boolean isUdfps = !ArrayUtils.isEmpty(udfpsProps);
+        boolean isUdfps = !ArrayUtils.isEmpty(udfpsProps);
 
         // config_is_powerbutton_fps indicates whether device has a power button fingerprint sensor.
         final boolean isPowerbuttonFps = getContext().getResources().getBoolean(
                 R.bool.config_is_powerbutton_fps);
+
+        DisplayManager mDM = (DisplayManager) getContext().getSystemService(Context.DISPLAY_SERVICE);
+        Point displayRealSize = new Point();
+        DisplayMetrics displayMetrics = new DisplayMetrics();
+        mDM.getDisplay(0).getRealSize(displayRealSize);
+        mDM.getDisplay(0).getMetrics(displayMetrics);
+
+        String[] xiaomiLocation = android.os.SystemProperties.get("persist.vendor.sys.fp.fod.location.X_Y", "").split(",");
+        if (xiaomiLocation.length != 2)
+            xiaomiLocation = android.os.SystemProperties.get("persist.sys.fp.fod.location.X_Y", "").split(",");
+        String[] xiaomiSize = android.os.SystemProperties.get("persist.vendor.sys.fp.fod.size.width_height", "").split(",");
+        if (xiaomiSize.length != 2)
+            xiaomiSize = android.os.SystemProperties.get("persist.sys.fp.fod.size.width_height", "").split(",");
+        if (xiaomiSize.length == 2 && xiaomiLocation.length == 2) {
+            udfpsProps = new int[3];
+            udfpsProps[0] = (int)displayRealSize.x/2;
+            udfpsProps[1] = Integer.parseInt(xiaomiLocation[1]);
+            udfpsProps[2] = Integer.parseInt(xiaomiSize[0])/2;
+            udfpsProps[1] += udfpsProps[2];
+            isUdfps = true;
+        }
+
+        if (readFile("/sys/class/fingerprint/fingerprint/position") != null) {
+            android.util.Log.d("PHH", "Samsung fingerprint");
+            String[] fodPositionArray = readFile("/sys/class/fingerprint/fingerprint/position").split(",");
+            float bottomMM = Float.parseFloat(fodPositionArray[0]);
+            float areaSizeMM = Float.parseFloat(fodPositionArray[5]);
+            float bottomInch = bottomMM * 0.0393700787f;
+            float areaSizeInch = areaSizeMM * 0.0393700787f;
+            int bottomPx = (int)(bottomInch * displayMetrics.ydpi);
+            int areaSizePx = (int)(areaSizeInch * displayMetrics.ydpi);
+            float mW = areaSizePx/2;
+            float mH = areaSizePx/2;
+            float mX = displayRealSize.x/2;
+            float mY = displayRealSize.y - bottomPx - mH;
+
+            samsungCmd(String.format("fod_rect,%d,%d,%d,%d", (int)(mX - mW/2), (int)(mY - mW/2), (int)(mX + mW/2), (int)(mY + mW/2)));
+
+            udfpsProps = new int[3];
+            udfpsProps[0] = (int)mX;
+            udfpsProps[1] = (int)mY;
+            udfpsProps[2] = (int)mW;
+            isUdfps = true;
+
+            try {
+                mSamsungFingerprint = ISehBiometricsFingerprint.getService();
+                Slog.d("PHH-Enroll", "Samsung ask for sensor status");
+                mSamsungFingerprint.sehRequest(6, 0, new java.util.ArrayList(), (int retval, java.util.ArrayList<Byte> out) -> {
+                    Slog.d("PHH-Enroll", "Result is " + retval);
+                    for(int i=0; i<out.size(); i++) {
+                        Slog.d("PHH-Enroll", "\t" + i + ":" + out.get(i));
+                    }
+                } );
+                Slog.d("PHH-Enroll", "Samsung ask for sensor brightness value");
+                mSamsungFingerprint.sehRequest(32, 0, new java.util.ArrayList(), (int retval, java.util.ArrayList<Byte> out) -> {
+                    Slog.d("PHH-Enroll", "Result is " + retval);
+                    for(int i=0; i<out.size(); i++) {
+                        Slog.d("PHH-Enroll", "\t" + i + ":" + out.get(i));
+                    }
+                } );
+
+            } catch(Exception e) {
+                Slog.d("PHH-Enroll", "Failed setting samsung3.0 fingerprint recognition", e);
+            }
+        }
+
+        int oppoSize = android.os.SystemProperties.getInt("persist.vendor.fingerprint.optical.iconsize", 0);
+        int oppoLocation = android.os.SystemProperties.getInt("persist.vendor.fingerprint.optical.iconlocation", 0);
+        if (oppoLocation > 0 && oppoSize > 0) {
+            int mW = oppoSize/2;
+            int mH = oppoSize/2;
+
+            Slog.d("PHH-Enroll", "Got Oppo icon location " + oppoLocation);
+            Slog.d("PHH-Enroll", "\tscreen size " + displayRealSize.x + ", " + displayRealSize.y);
+            int mX = displayRealSize.x/2;
+            //int mY = displayRealSize.y - oppoLocation + mW;
+            int mY = displayRealSize.y - oppoLocation;
+
+            Slog.d("PHH-Enroll", "\tfacola at " + mX + ", " + mY);
+            udfpsProps = new int[3];
+            udfpsProps[0] = (int)mX;
+            udfpsProps[1] = (int)mY;
+            udfpsProps[2] = (int)mW;
+            isUdfps = true;
+        }
+
+        // Asus ZF8
+        if (android.os.SystemProperties.get("ro.vendor.build.fingerprint").contains("ASUS_I006D")) {
+            udfpsProps = new int[3];
+            udfpsProps[0] = displayRealSize.x/2;;
+            udfpsProps[1] = 1741;
+            udfpsProps[2] = 110;
+            isUdfps = true;
+        }
+
+        // ROG Phone 3
+        if (android.os.SystemProperties.get("ro.vendor.build.fingerprint").contains("ASUS_I003")) {
+            udfpsProps = new int[3];
+            udfpsProps[0] = displayRealSize.x/2;;
+            udfpsProps[1] = 1752;
+            udfpsProps[2] = 110;
+            isUdfps = true;
+        }
+
+        // Redmagic 5g
+        if ("NX659J".equals(android.os.SystemProperties.get("ro.product.vendor.model"))) {
+            udfpsProps = new int[3];
+            udfpsProps[0] = displayRealSize.x/2;;
+            udfpsProps[1] = 1984;
+            udfpsProps[2] = 95;
+            isUdfps = true;
+        }
+
+        if (udfpsProps.length > 0) {
+                Slog.d("PHH-Enroll", "Got udfps infos " + udfpsProps[0] + ", " + udfpsProps[1] + ", " + udfpsProps[2]);
+        }
 
         final @FingerprintSensorProperties.SensorType int sensorType;
         if (isUdfps) {
-            sensorType = FingerprintSensorProperties.TYPE_UDFPS_OPTICAL;
+            if (android.os.SystemProperties.getBoolean("persist.sys.phh.ultrasonic_udfps", false)) {
+                sensorType = FingerprintSensorProperties.TYPE_UDFPS_ULTRASONIC;
+            } else {
+                sensorType = FingerprintSensorProperties.TYPE_UDFPS_OPTICAL;
+            }
         } else if (isPowerbuttonFps) {
             sensorType = FingerprintSensorProperties.TYPE_POWER_BUTTON;
         } else {
diff --git a/services/core/java/com/android/server/biometrics/sensors/fingerprint/UdfpsHelper.java b/services/core/java/com/android/server/biometrics/sensors/fingerprint/UdfpsHelper.java
index 29661d46f328..bfe639143c7d 100644
--- a/services/core/java/com/android/server/biometrics/sensors/fingerprint/UdfpsHelper.java
+++ b/services/core/java/com/android/server/biometrics/sensors/fingerprint/UdfpsHelper.java
@@ -23,44 +23,153 @@ import android.hardware.fingerprint.FingerprintManager;
 import android.os.RemoteException;
 import android.util.Slog;
 
+import vendor.goodix.hardware.biometrics.fingerprint.V2_1.IGoodixFingerprintDaemon;
+import vendor.samsung.hardware.biometrics.fingerprint.V3_0.ISehBiometricsFingerprint;
+
+import java.io.PrintWriter;
+
 /**
  * Contains helper methods for under-display fingerprint HIDL.
  */
 public class UdfpsHelper {
 
     private static final String TAG = "UdfpsHelper";
+
+    private static void writeFile(String path, String value) {
+        try {
+            PrintWriter writer = new PrintWriter(path, "UTF-8");
+            writer.println(value);
+            writer.close();
+        } catch(Exception e) {
+            android.util.Log.d("PHH", "Failed writing to " + path + ": " + value);
+        }
+    }
 
     public static void onFingerDown(IBiometricsFingerprint daemon, int x, int y, float minor,
             float major) {
-        android.hardware.biometrics.fingerprint.V2_3.IBiometricsFingerprint extension =
+            android.hardware.biometrics.fingerprint.V2_3.IBiometricsFingerprint extension =
                 android.hardware.biometrics.fingerprint.V2_3.IBiometricsFingerprint.castFrom(
                         daemon);
-        if (extension == null) {
+            if (extension != null) {
+                try {
+                    extension.onFingerDown(x, y, minor, major);
+                    return;
+                } catch (RemoteException e) {
+                    Slog.e(TAG, "onFingerDown | RemoteException: ", e);
+                }
+            }
+
+            try {
+                if ("true".equals(android.os.SystemProperties.get("persist.sys.phh.ultrasonic_udfps"))) {
+                    Slog.e(TAG, "trying ultrasonic samsung pressed");
+                    ISehBiometricsFingerprint fp = ISehBiometricsFingerprint.getService();
+                    fp.sehRequest(22 /* SEM_FINGER_STATE */, 2 /* finger pressed */, new java.util.ArrayList<Byte>(),
+                            (int retval, java.util.ArrayList<Byte> out) -> {} );
+                }
+            } catch(Throwable t) {
+                Slog.e(TAG, "Tried sending Samsung command failed");
+            }
+
+            try {
+                // Asus goodix commands
+                IGoodixFingerprintDaemon goodixDaemon = IGoodixFingerprintDaemon.getService();
+                if(android.os.SystemProperties.get("ro.vendor.build.fingerprint").contains("ASUS")) {
+                    goodixDaemon.sendCommand(200001, new java.util.ArrayList<Byte>(), (returnCode, resultData) -> {
+                        Slog.e(TAG, "Goodix send command returned code "+ returnCode);
+                    });
+                } else {
+                    //UI READY
+                    goodixDaemon.sendCommand(0x600, new java.util.ArrayList<Byte>(), (returnCode, resultData) -> {
+                        Slog.e(TAG, "Goodix send command returned code "+ returnCode);
+                    });
+                    goodixDaemon.sendCommand(1607, new java.util.ArrayList<Byte>(), (returnCode, resultData) -> {
+                        Slog.e(TAG, "Goodix send command returned code "+ returnCode);
+                    });
+                }
+                 return;
+            } catch(Throwable t) {
+                Slog.e(TAG, "Tried sending goodix daemon cmd failed", t);
+            }
+
+            try {
+                vendor.oplus.hardware.biometrics.fingerprint.V2_1.IBiometricsFingerprint fp = vendor.oplus.hardware.biometrics.fingerprint.V2_1.IBiometricsFingerprint.getService();
+                writeFile("/sys/kernel/oppo_display/notify_fppress", "1");
+                writeFile("/sys/kernel/oplus_display/oplus_notify_fppress", "1");
+                fp.touchDown();
+            } catch(Throwable t) {
+                Slog.e(TAG, "Tried sending oplus daemon cmd failed", t);
+            }
+
+            try {
+                vendor.oppo.hardware.biometrics.fingerprint.V2_1.IBiometricsFingerprint fp = vendor.oppo.hardware.biometrics.fingerprint.V2_1.IBiometricsFingerprint.getService();
+                writeFile("/sys/kernel/oppo_display/notify_fppress", "1");
+                writeFile("/sys/kernel/oplus_display/oplus_notify_fppress", "1");
+                fp.touchDown();
+            } catch(Throwable t) {
+                Slog.e(TAG, "Tried sending oplus daemon cmd failed", t);
+            }
+
             Slog.v(TAG, "onFingerDown | failed to cast the HIDL to V2_3");
-            return;
-        }
-
-        try {
-            extension.onFingerDown(x, y, minor, major);
-        } catch (RemoteException e) {
-            Slog.e(TAG, "onFingerDown | RemoteException: ", e);
-        }
     }
 
     public static void onFingerUp(IBiometricsFingerprint daemon) {
         android.hardware.biometrics.fingerprint.V2_3.IBiometricsFingerprint extension =
                 android.hardware.biometrics.fingerprint.V2_3.IBiometricsFingerprint.castFrom(
-                        daemon);
-        if (extension == null) {
-            Slog.v(TAG, "onFingerUp | failed to cast the HIDL to V2_3");
+                    daemon);
+        if (extension != null) {
+            try {
+                extension.onFingerUp();
+                return;
+            } catch (RemoteException e) {
+                Slog.e(TAG, "onFingerUp | RemoteException: ", e);
+            }
+        }
+
+        try {
+            if ("true".equals(android.os.SystemProperties.get("persist.sys.phh.ultrasonic_udfps"))) {
+                Slog.e(TAG, "trying ultrasonic samsung released");
+                ISehBiometricsFingerprint fp = ISehBiometricsFingerprint.getService();
+                fp.sehRequest(22 /* SEM_FINGER_STATE */, 1 /* finger pressed */, new java.util.ArrayList<Byte>(),
+                        (int retval, java.util.ArrayList<Byte> out) -> {} );
+            }
+        } catch(Throwable t) {
+            Slog.e(TAG, "Tried sending Samsung command failed");
+        }
+
+        try {
+            IGoodixFingerprintDaemon goodixDaemon = IGoodixFingerprintDaemon.getService();
+            if (android.os.SystemProperties.get("ro.vendor.build.fingerprint").contains("ASUS")) {
+                goodixDaemon.sendCommand(200003, new java.util.ArrayList<Byte>(), (returnCode, resultData) -> {
+                    Slog.e(TAG, "Goodix send command returned code " + returnCode);
+                });
+            } else {
+                goodixDaemon.sendCommand(0x601, new java.util.ArrayList<Byte>(), (returnCode, resultData) -> {
+                    Slog.e(TAG, "Goodix send command returned code "+ returnCode);
+                });
+            }
             return;
+            } catch(Throwable t) {
+            Slog.e(TAG, "Tried sending goodix daemon cmd failed", t);
+        }
+
+        try {
+            vendor.oplus.hardware.biometrics.fingerprint.V2_1.IBiometricsFingerprint fp = vendor.oplus.hardware.biometrics.fingerprint.V2_1.IBiometricsFingerprint.getService();
+            writeFile("/sys/kernel/oppo_display/notify_fppress", "0");
+            writeFile("/sys/kernel/oplus_display/oplus_notify_fppress", "0");
+            fp.touchUp();
+        } catch(Throwable t) {
+            Slog.e(TAG, "Tried sending oplus daemon cmd failed", t);
         }
 
         try {
-            extension.onFingerUp();
-        } catch (RemoteException e) {
-            Slog.e(TAG, "onFingerUp | RemoteException: ", e);
+            vendor.oppo.hardware.biometrics.fingerprint.V2_1.IBiometricsFingerprint fp = vendor.oppo.hardware.biometrics.fingerprint.V2_1.IBiometricsFingerprint.getService();
+            writeFile("/sys/kernel/oppo_display/notify_fppress", "0");
+            writeFile("/sys/kernel/oplus_display/oplus_notify_fppress", "0");
+            fp.touchUp();
+        } catch(Throwable t) {
+            Slog.e(TAG, "Tried sending oplus daemon cmd failed", t);
         }
+        Slog.v(TAG, "onFingerUp | failed to cast the HIDL to V2_3");
     }
 
     public static boolean isValidAcquisitionMessage(@NonNull Context context,
diff --git a/services/core/java/com/android/server/biometrics/sensors/fingerprint/hidl/Fingerprint21.java b/services/core/java/com/android/server/biometrics/sensors/fingerprint/hidl/Fingerprint21.java
index 28d130bafab9..d1b5f984bdd3 100644
--- a/services/core/java/com/android/server/biometrics/sensors/fingerprint/hidl/Fingerprint21.java
+++ b/services/core/java/com/android/server/biometrics/sensors/fingerprint/hidl/Fingerprint21.java
@@ -705,7 +705,8 @@ public class Fingerprint21 implements IHwBinder.DeathRecipient, ServiceProvider
 
     private void scheduleInternalCleanup(int userId,
             @Nullable BaseClientMonitor.Callback callback) {
-        if (!mCleanup) {
+        final boolean mNocleanup = android.os.SystemProperties.getBoolean("persist.sys.phh.fingerprint.nocleanup", false);
+        if (mNocleanup) {
             return;
         }
         mHandler.post(() -> {
-- 
2.40.0

